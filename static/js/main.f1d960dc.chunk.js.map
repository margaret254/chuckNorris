{"version":3,"sources":["components/logo.svg","components/navbar/navbar.js","components/footer/footer.js","actions/categoryActions.js","actions/types.js","actions/randomJokeAction.js","components/card/card.js","components/pills/pills.js","components/App.js","serviceWorker.js","reducers/categoryReducer.js","reducers/jokesReducer.js","reducers/index.js","store.js","index.js"],"names":["module","exports","Navbar","class","href","className","Component","Footer","center","cache","InMemoryCache","link","HttpLink","uri","client","ApolloClient","fetchJoke","categoryIn","category","toLowerCase","dispatch","console","log","query","gql","variables","fetchPolicy","then","result","type","joke","catch","error","selectCategory","fetchRandomJoke","random_joke","Card","props","this","activeCategory","jokes","data","loading","undefined","icon_url","src","alt","toUpperCase","value","onClick","nextJoke","categories","connect","state","getCategories","getRandomJoke","Pills","map","changeCategoryOnClick","App","fetchCategories","column","Boolean","window","location","hostname","match","initialState","action","combineReducers","middleware","thunk","store","createStore","rootReducer","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2IAAAA,EAAOC,QAAU,IAA0B,kC,6MCe5BC,G,yLAVX,OACE,yBAAKC,MAAM,OACT,uBAAGC,KAAK,IAAIC,UAAU,cAAtB,oB,GAJaC,c,QCkBNC,E,uKAhBP,OAEG,kBAAC,IAAD,CAASC,QAAM,GACV,4BAAQH,UAAU,UACT,yD,GAPHC,a,2iBCItB,IAAMG,EAAQ,IAAIC,IACZC,EAAO,IAAIC,IAAS,CACtBC,IAAK,0DAGHC,EAAS,IAAIC,IAAa,CAC5BN,QACAE,SA+BG,SAASK,EAAUC,GAEtB,IAAMC,EAASD,EAAWE,cAC1B,OAAO,SAASC,GACZC,QAAQC,IAAIJ,GAEZ,IAAMK,EAASC,IAAJ,KAaXV,EAAOS,MACH,CACIA,MAAOA,EACPE,UAAW,CACPP,SAAUA,GAEdQ,YAAa,iBAEnBC,MAAK,SAACC,GACJP,QAAQC,IAAIM,GACZR,EAAS,CACLS,KCzEe,oBD0EfC,KAAKF,OAEVG,OAAM,SAAAC,GACLX,QAAQC,IAAIU,OAMjB,SAASC,EAAef,GAE3B,OAAO,SAASE,GACZA,EAAS,CACLS,KCrFiB,kBDsFjBX,SAASA,K,sQEnFrB,IAAMT,EAAQ,IAAIC,IACZC,EAAO,IAAIC,IAAS,CACxBC,IAAK,0DAGDC,EAAS,IAAIC,IAAa,CAC9BN,QACAE,SAIK,SAASuB,IACd,OAAO,SAASd,GACdN,EACGS,MAAM,CACLA,MAAOC,IAAF,KAWLE,YAAa,iBAEdC,MAAK,SAAAC,GACJP,QAAQC,IAAIM,GACZR,EAAS,CACPS,KDrCmB,kBCsCnBM,YAAaP,OAGhBG,OAAM,SAAAC,GACLX,QAAQC,IAAIU,O,UCpCdI,E,kDAEF,WAAYC,GAAQ,wC,iEAMhBC,KAAKD,MAAMrB,UAAUsB,KAAKD,MAAME,gBAGhCD,KAAKD,MAAMH,oB,+BAKL,IAAD,OAELb,QAAQC,IAAIgB,KAAKD,OAFZ,MAIwCC,KAAKD,MAA1CE,EAJH,EAIGA,eAAqBJ,GAJxB,EAIkBK,MAJlB,EAIwBL,aACxBM,EAAcN,EAAdM,KAEL,GAFmBN,EAATO,QAGN,MAAO,kBAGP,IAAIZ,EAAK,GAiBT,MAhBoB,KAAjBS,GAAwC,WAAjBA,GACtBlB,QAAQC,IAAImB,QAEFE,IAAPF,IACCH,KAAKD,MAAMJ,eAAe,UAC1BH,EAAKK,EAAYM,KAAKN,eAK1Bd,QAAQC,IAAIgB,KAAKD,MAAMP,KAAKW,KAAKD,OACD,OAA7BF,KAAKD,MAAMP,KAAKW,KAAKD,QACpBV,EAAKQ,KAAKD,MAAMP,KAAKW,KAAKD,QAK9B,6BACG,yBAAKnC,UAAU,gBACGsC,IAAhBb,EAAKc,UAAwB,yBAAKzC,MAAM,aAC5C,yBAAKA,MAAM,qBACX,yBAAK0C,IAAKf,EAAKc,SAAUE,IAAI,UAG7B,yBAAK3C,MAAM,oCACH,yBAAKA,MAAM,iBAAiBoC,EAAeQ,eAC3C,yBAAK5C,MAAM,qBAAqB2B,EAAKkB,OAYrC,yBAAK7C,MAAM,qBAOX,yBAAKA,MAAM,iBACP,4BAAQA,MAAM,mDAAmD8C,QAAS,WAAQ,EAAKC,SAAS,YAAhG,UACA,4BAAQ/C,MAAM,sCAAsC8C,QAAS,WAAQ,EAAKC,SAASpB,EAAKqB,WAAW,MAAnG,e,+BAchBjC,GACLG,QAAQC,IAAI,uBACZD,QAAQC,IAAIJ,GACE,WAAXA,QAAkCyB,IAAXzB,GACtBoB,KAAKD,MAAMJ,eAAe,UAC1BK,KAAKD,MAAMH,mBAEXI,KAAKD,MAAMrB,UAAUE,O,GAhGdZ,aAqHJ8C,eAXS,SAAAC,GAAK,MAAK,CAC9Bd,eAAec,EAAMC,cAAcf,eACnCT,KAAKuB,EAAMC,cAAcxB,KACzBK,YAAYkB,EAAME,cAAcpB,eAQI,CAAGnB,YAAUkB,kBAAiBD,kBAAvDmB,CAA0EhB,GCrHnFoB,G,wDAEF,WAAYnB,GAAO,uCACTA,G,kEAKYnB,GAElBoB,KAAKD,MAAMJ,eAAef,GAC1BoB,KAAKD,MAAMrB,UAAUE,K,+BAOf,IAAD,UAIgBoB,KAAKD,MAAMc,WACNb,KAAKD,MAAMc,YALhC,EAKGV,KAIR,OAAe,GATV,EAKSC,QAWN,6BAGQ,kBAAC,IAAD,KAEQJ,KAAKD,MAAMc,WAAWV,KAAKU,WAAWM,KAAI,SAACvC,GAEvC,OACI,uBAAK+B,QAAS,WAAQ,EAAKS,sBAAsBxC,IACjDb,UAAYa,IAAa,EAAKmB,MAAME,eAAiB,8BAAgC,0BAC/ErB,QAe9B,yBAAKf,MAAM,gBACX,yBAAKA,MAAM,4B,GA5DPG,cAmFL8C,eAVS,SAAAC,GAAK,MAAK,CAC9Bd,eAAec,EAAMC,cAAcf,eACnCY,WAAYE,EAAMC,cAAcH,cAQI,CAChCnC,YACAiB,kBAFOmB,CAGZI,GC5EGG,E,kDAEJ,aAAc,wC,iEAMZrB,KAAKD,MAAMuB,kBACXtB,KAAKD,MAAMH,oB,+BAQX,OAEE,kBAAC,IAAD,CAAS2B,QAAQ,GACf,kBAAC,EAAD,MACA,kBAAC,IAAD,CAASrD,QAAM,GACf,kBAAC,EAAD,OAEA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAzBUF,aA+CF8C,eATQ,SAAAC,GAAK,MAAK,CAChCF,WAAYE,EAAMC,cAAcH,WAChChB,YAAYkB,EAAME,cAAcpB,YAChCL,KAAKuB,EAAMC,cAAcxB,QAMc,CAAK8B,gBL9CvC,WAEH,OAAO,SAASxC,GAEZN,EAAOS,MACH,CACIA,MAAOC,IAAF,OAMXG,MAAK,SAACC,GACJP,QAAQC,IAAIM,GACZR,EAAS,CACLS,KC9BY,iBD+BZsB,WAAWvB,OAEhBG,OAAM,SAAAC,GACLX,QAAQC,IAAIU,QK2BsCE,mBAA9CkB,CAAkEO,GCnD9DG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BCfAC,EAAa,CACfhB,WAAW,GACXZ,eAAe,GACfT,KAAK,IA4BMwB,EAxBK,WAAoC,IAA3BD,EAA0B,uDAApBc,EAAaC,EAAO,uCAEnD,OAAOA,EAAOvC,MAEV,INZoB,iBMahB,kCACOwB,GADP,IAEIF,WAAWiB,EAAOjB,aAE1B,INhBqB,kBMiBjB,kCACOE,GADP,IAEId,eAAe6B,EAAOlD,WAE9B,INvBuB,oBMwBnB,kCACOmC,GADP,IAEIvB,KAAKsC,EAAOtC,OAEpB,QACI,OAAOuB,IC5Bbc,EAAa,CACfhC,YAAY,IAmBDoB,EAfK,WAAoC,IAA3BF,EAA0B,uDAApBc,EAAaC,EAAO,uCAEnD,OAAOA,EAAOvC,MAEV,IPXqB,kBOYjB,kCACOwB,GADP,IAEIlB,YAAYiC,EAAOjC,cAG3B,QACI,OAAOkB,ICbJgB,cAAgB,CAC3Bf,cAAcA,EACdC,cAAcA,ICFZe,EAAW,CAACC,KAKHC,EAFHC,YAAYC,EAJL,GAI8BC,IAAe,WAAf,EAAmBL,ICApEM,IAASC,OACP,kBAAC,IAAMC,WAAP,KACG,kBAAC,IAAD,CAAUN,MAAOA,GAClB,kBAAC,EAAD,QAGFO,SAASC,eAAe,SLqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxD,MAAK,SAAAyD,GACJA,EAAaC,gBAEdtD,OAAM,SAAAC,GACLX,QAAQW,MAAMA,EAAMsD,c","file":"static/js/main.f1d960dc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport \"../navbar/navbar.css\";\n\nclass Navbar extends Component {\n  render() {\n    return (\n      <nav class=\"nav\">\n        <a href=\"#\" className=\"nav__title\">\n          ChuckNorris\n        </a>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from 'react'\nimport {FlexBox} from \"react-styled-flex\"\nclass  Footer extends Component{\n\n    render(){\n        return(\n           \n           <FlexBox center>\n                <footer className=\"footer\">\n                         <p>&copy; Margaret Mwangi</p>\n                </footer>\n           </FlexBox>\n               \n       \n           \n        )\n    }\n\n \n}\n\nexport default Footer","import { GET_CATEGORIES,ACTIVE_CATEGORY,GET_CATEGORY_JOKE} from '../actions/types';\n\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport gql from 'graphql-tag';\nconst cache = new InMemoryCache();\nconst link = new HttpLink({\n    uri: \"https://chuck-norris-api-k3nnet.herokuapp.com/graphql\"\n});\n\nconst client = new ApolloClient({\n    cache,\n    link\n});\n\n//fetch categories from api\nexport function fetchCategories() {\n\n    return function(dispatch){\n\n        client.query(\n            {\n                query: gql`\n                {\n                    categories\n                    }\n              `\n            }\n        ).then((result)=>{\n            console.log(result)\n            dispatch({\n                type:GET_CATEGORIES,\n                categories:result\n            })\n        }).catch(error=>{\n            console.log(error)\n        })\n    }\n\n   \n}\n\n// fetch a single joke under given category\nexport function fetchJoke(categoryIn){\n  \n    const category=categoryIn.toLowerCase()\n    return function(dispatch){\n        console.log(category)\n\n        const query =  gql`\n        query jokes($category: String!){\n            jokes(category:$category){\n                id\n                value\n                categories\n                updated_at\n                icon_url\n                \n              }\n        }\n       \n      `;\n        client.query(\n            {\n                query: query,\n                variables: {\n                    category: category\n                },\n                fetchPolicy: 'network-only'\n            }\n        ).then((result)=>{\n            console.log(result)\n            dispatch({\n                type:GET_CATEGORY_JOKE,\n                joke:result\n            })\n        }).catch(error=>{\n            console.log(error)\n        })\n    }\n}\n\n//change active category\nexport function selectCategory(category){\n\n    return function(dispatch){\n        dispatch({\n            type:ACTIVE_CATEGORY,\n            category:category\n        })\n    }\n}","export const GET_RANDOM_JOKE=\"GET_RANDOM_JOKE\"\nexport const GET_CATEGORY_JOKE=\"GET_CATEGORY_JOKE\"\nexport const GET_CATEGORIES=\"GET_CATEGORIES\"\nexport const ACTIVE_CATEGORY=\"ACTIVE_CATEGORY\"","import { GET_RANDOM_JOKE } from \"../actions/types\";\n\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport gql from \"graphql-tag\";\nconst cache = new InMemoryCache();\nconst link = new HttpLink({\n  uri: \"https://chuck-norris-api-k3nnet.herokuapp.com/graphql\"\n});\n\nconst client = new ApolloClient({\n  cache,\n  link\n});\n\n//fetch a single random joke from api\nexport function fetchRandomJoke() {\n  return function(dispatch) {\n    client\n      .query({\n        query: gql`\n          {\n            random_joke {\n              id\n              value\n              categories\n              updated_at\n              icon_url\n            }\n          }\n        `,\n        fetchPolicy: \"network-only\"\n      })\n      .then(result => {\n        console.log(result);\n        dispatch({\n          type: GET_RANDOM_JOKE,\n          random_joke: result\n        });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n}\n","import React, { Component } from 'react'\nimport '../card/card.css'\nimport { connect} from 'react-redux'\nimport { fetchJoke ,selectCategory} from '../../actions/categoryActions'\nimport {fetchRandomJoke} from '../../actions/randomJokeAction'\nimport Moment from 'react-moment';\nclass Card extends Component {\n\n    constructor(props) {\n        super()\n       \n    }\n\n    componentWillMount() {\n        this.props.fetchJoke(this.props.activeCategory)\n\n       \n        this.props.fetchRandomJoke();\n       \n    }\n\n\n    render() {\n        \n        console.log(this.props)\n        \n         const {activeCategory,jokes,random_joke } = this.props\n        let {data,loading}=random_joke\n       \n        if(loading){\n            return \"getting joke...\"\n        }\n        else{\n            let joke={}\n            if(activeCategory===\"\" || activeCategory===\"Random\"){\n                console.log(data)\n                \n                if(data!==undefined){\n                    this.props.selectCategory(\"Random\")\n                    joke=random_joke.data.random_joke\n                }\n               \n                \n            }else{\n                console.log(this.props.joke.data.jokes)\n                if(this.props.joke.data.jokes!==null){\n                    joke=this.props.joke.data.jokes;\n                }\n                //\n            }\n            return (\n                <div >\n                   <div className=\"wrapper\">\n                   { joke.icon_url!==undefined && <div class=\"joke-card\">\n                 <div class=\"profile-card__img\">\n                 <img src={joke.icon_url} alt=\"icon\"/>\n                 </div>\n\n                 <div class=\"profile-card__cnt js-profile-cnt\">\n                         <div class=\"card_category\">{activeCategory.toUpperCase()}</div>\n                         <div class=\"profile-card__txt\">{joke.value}</div>\n\n\n                         {/* <div class=\"joke-card-inf\">\n                             <div class=\"joke-card-inf__item\">\n\n                                 {joke.updated_at!==undefined && <div class=\"joke-card-inf__txt\">updated: <Moment  format=\"D MMM YYYY\">{joke.updated_at}</Moment></div>}\n                             </div>\n\n\n                         </div> */}\n\n                         <div class=\"joke-card-social\">\n\n\n\n\n                         </div>\n\n                         <div class=\"joke-card-ctr\">\n                             <button class=\"profile-card__button button--blue js-message-btn\" onClick={() => { this.nextJoke(\"Random\") }}>Random</button>\n                             <button class=\"profile-card__button button--orange\" onClick={() => { this.nextJoke(joke.categories[0]) }}>Next</button>\n                         </div>\n                     </div>\n\n                \n\n                 </div>}\n             </div>\n                 </div>\n            )\n        }\n\n    }\n\n    nextJoke(category){\n        console.log(\"next button clicked\")\n        console.log(category)\n        if(category===\"Random\" || category===undefined){\n            this.props.selectCategory(\"Random\")\n            this.props.fetchRandomJoke()\n        }else{\n            this.props.fetchJoke(category)\n        }\n                   \n                    \n    }\n\n\n    \n}\n\nconst mapStateToProps = state => ({\n    activeCategory:state.getCategories.activeCategory,\n    joke:state.getCategories.joke,\n    random_joke:state.getRandomJoke.random_joke\n    \n\n})\n\n\n\n\nexport default connect(mapStateToProps, {  fetchJoke,fetchRandomJoke, selectCategory  })(Card)","import React, { Component } from 'react'\nimport { connect} from 'react-redux'\nimport { fetchJoke,selectCategory } from '../../actions/categoryActions'\nimport {FlexBox, FlexItem} from \"react-styled-flex\"\nimport '../pills/pills.css'\n\nclass Pills extends Component {\n\n    constructor(props){\n        super(props)\n\n    }\n\n\n    changeCategoryOnClick(category){\n       \n        this.props.selectCategory(category)\n        this.props.fetchJoke(category)\n      \n\n    }\n\n    \n\n    render() {\n\n        \n       \n        const activeCategory=this.props.categories\n        const { data, loading } = this.props.categories\n       \n        const categories = data;\n     \n        if (loading == false) {\n         \n           \n\n            return (\n\n\n                <div>\n                    \n                   \n                        <FlexItem>\n                            {\n                                this.props.categories.data.categories.map((category) => {\n                                    \n                                    return (\n                                        <a   onClick={() => { this.changeCategoryOnClick(category) }}\n                                        className={(category === this.props.activeCategory ? \"category__item active__item\" : \"category__item  github\")\n                                          } >{category} \n       \n        </a>\n                                    )\n                                })\n                            }\n\n\n                        </FlexItem>\n                  \n                </div>\n            )\n        }\n        else {\n            return (\n                <div class=\"progress-bar\">\n                <div class=\"progress-bar-value\"></div>\n              </div>\n            )\n        }\n\n\n\n\n    }\n\n\n}\n\nconst mapStateToProps = state => ({\n    activeCategory:state.getCategories.activeCategory,\n    categories: state.getCategories.categories\n\n})\n\n\n\n\n\nexport default connect(mapStateToProps, {\n        fetchJoke,\n        selectCategory\n})(Pills)","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Navbar from './navbar/navbar'\nimport Footer from './footer/footer'\nimport Card from './card/card'\n\nimport { Component } from 'react';\nimport Pills from './pills/pills';\n\n\nimport {FlexBox} from \"react-styled-flex\"\nimport { connect} from 'react-redux'\nimport { fetchCategories,selectCategory } from '../actions/categoryActions'\nimport {fetchRandomJoke} from '../actions/randomJokeAction'\n\nclass App extends Component{\n\n  constructor(){\n    super()\n  \n  }\n\n  componentWillMount() {\n    this.props.fetchCategories()\n    this.props.fetchRandomJoke()\n   \n}\n\n\n  render(){\n\n   \n    return (\n     \n      <FlexBox column={true} >\n        <Navbar></Navbar>\n        <FlexBox center >\n        <Pills></Pills>\n        </FlexBox>\n        <Card></Card>\n        <Footer></Footer>\n      </FlexBox>\n      \n    );\n\n  }\n\n \n\n\n}\n\n//make  states available in props\nconst mapStateToProps = state => ({\n  categories: state.getCategories.categories,\n  random_joke:state.getRandomJoke.random_joke,\n  joke:state.getCategories.joke\n  \n\n})\n\n//connect states and fuctions to props\nexport default  connect(mapStateToProps, {    fetchCategories,fetchRandomJoke  })(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {GET_CATEGORIES,ACTIVE_CATEGORY,GET_CATEGORY_JOKE,GET_RANDOM_JOKE} from '../actions/types';\n\n\nconst initialState={\n    categories:[],\n    activeCategory:\"\",\n    joke:{}\n}\n\n// update global states associated with joke categories\nconst getCategories=function(state=initialState,action){\n    \n    switch(action.type){\n\n        case GET_CATEGORIES:\n            return{\n                ...state,\n                categories:action.categories\n            }\n        case ACTIVE_CATEGORY:\n            return{\n                ...state,\n                activeCategory:action.category\n            }\n        case GET_CATEGORY_JOKE:\n            return{\n                ...state,\n                joke:action.joke\n            }\n        default:\n            return state\n    }\n}\n\nexport default getCategories","import {GET_RANDOM_JOKE} from '../actions/types'\n\nconst initialState={\n    random_joke:{}\n}\n\n//update random joke state\nconst getRandomJoke=function(state=initialState,action){\n\n    switch(action.type){\n\n        case GET_RANDOM_JOKE:\n            return{\n                ...state,\n                random_joke:action.random_joke\n            }\n        \n        default:\n            return state\n    }\n}\n\nexport default getRandomJoke","import {combineReducers} from 'redux'\nimport getCategories from './categoryReducer'\nimport getRandomJoke from './jokesReducer'\n\n//root reducer\nexport default combineReducers({\n    getCategories:getCategories,\n    getRandomJoke:getRandomJoke\n})","import {createStore,applyMiddleware} from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from './reducers/'\n\nconst initialState={}\nconst middleware=[thunk]\n\n//global store of states\nconst store=createStore(rootReducer,initialState,applyMiddleware(...middleware))\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Provider} from 'react-redux'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store'\n\nReactDOM.render(\n  <React.StrictMode>\n     <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}